name: Build, push, and deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      env:
        type: choice
        default: "staging"
        description: "Environment to deploy to"
        required: true
        options:
          - staging
          - prod

env:
  NODE_VERSION: 23.6.1

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.setup-node.outputs.node-version }}

    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci --include=dev

      - name: Linting
        run: npm run lint

      - name: Type Check
        run: npm run tsc

  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Start MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e "CREATE DATABASE IF NOT EXISTS test_db;" -u'root' -p'root'
          mysql --version

      - run: npm ci --include=dev

      - name: Wait for MySQL to be ready
        run: |
          until mysqladmin ping -h "127.0.0.1" --silent; do
            echo "Waiting for MySQL..."
            sleep 5
          done

      - name: Load schema into MySQL
        run: |
          mysql -u'root' -p'root' -D'test_db' < db/data/init.sql.local

      - name: Create file from secret
        run: echo 'root' > ./db-password

      - name: Run Jest tests
        env:
          API_KEY: test
          HOST: 0.0.0.0
          PORT: 8000
          DB_HOST: localhost
          DB_NAME: test_db
          DB_PASS: ./db-password
          DB_USER: root
        run: |
          SERVER_LOG=$(mktemp)
          # Start server in background and capture output in temp file
          npm run ts-node -- src/server.ts &> $SERVER_LOG & pid=$!
          sleep 2
          ps -o pid | egrep -q "^\s*${pid}$" || (cat $SERVER_LOG && exit 1)
          # Run test then kill server
          npm test || (cat $SERVER_LOG && exit 1)
          sleep 1
          kill -SIGINT %1
          cat $SERVER_LOG

  build:
    name: Build and push to Docker Hub
    runs-on: arc-runner-set
    needs: [lint, test]
    outputs:
      commit-sha: ${{ steps.extractor.outputs.short_sha }}
      environment: ${{ steps.set-environment.outputs.env }}
      repo-name: ${{ steps.extractor.outputs.repo_name }}
    steps:
      - name: Determine Environment
        id: set-environment
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "env=${{ github.event.inputs.env }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "env=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            echo "Failed to determine environment"
            exit 1
          fi
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.ORG_DOCKERHUB_USERNAME }}
          password: ${{ secrets.ORG_DOCKERHUB_TOKEN }}

      - name: Extract repository name and commit SHA
        id: extractor
        run: |
          echo "${{ github.repository }}" | sed -E "s|^.*/(.*)$|repo_name=\1|" | tr "[:upper:]" "[:lower:]" >> $GITHUB_OUTPUT
          echo "${{ github.sha }}" | sed -E "s|^(.{7}).*$|short_sha=\1|" >> $GITHUB_OUTPUT

      - name: Build and push to ${{ steps.set-environment.outputs.env }}
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ secrets.ORG_DOCKERHUB_USERNAME }}/${{ secrets.ORG_DOCKERHUB_REPO }}:${{ steps.extractor.outputs.repo_name }}-${{ steps.set-environment.outputs.env }}

  deploy:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infrastructure config
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.ORG_DOCKERHUB_USERNAME }}
          password: ${{ secrets.ORG_DOCKERHUB_TOKEN }}

      - name: Set kube context
        uses: azure/k8s-set-context@v4
        with:
          method: service-account
          k8s-url: https://kube.masterofcubesau.com:6443
          k8s-secret: ${{ secrets.ORG_K3S_AUTH_TOKEN }}

      - name: Add internal chartmuseum
        run: |
          helm repo add chartmuseum https://chartmuseum.masterofcubesau.com \
          --username ${{ secrets.ORG_CHARTMUSEUM_USER }} \
          --password ${{ secrets.ORG_CHARTMUSEUM_PASS }}

      - name: Deploy application to ${{ needs.build.outputs.environment }}
        env:
          ENVIRONMENT: ${{ needs.build.outputs.environment }}
          STAGING_PREFIX: ${{ needs.build.outputs.environment == 'staging' && 'staging.' || '' }}
          REPO_NAME: ${{ needs.build.outputs.repo-name }}
          COMMIT_SHA: ${{ needs.build.outputs.commit-sha }}
          DOCKERHUB_USERNAME: ${{ secrets.ORG_DOCKERHUB_USERNAME }}
          DOCKERHUB_REPO: ${{ secrets.ORG_DOCKERHUB_REPO }}
          DB_PASSWORD: ${{ needs.build.outputs.environment == 'prod' && secrets.DB_PASSWORD_PROD || secrets.DB_PASSWORD_STAGING }}
          DB_ROOT_PASSWORD: ${{ needs.build.outputs.environment == 'prod' && secrets.DB_ROOT_PASSWORD_PROD || secrets.DB_ROOT_PASSWORD_STAGING }}
          PERSISTENCE_SIZE: ${{ needs.build.outputs.environment == 'prod' && '3Gi' || '50Mi' }}
        run: |
          cat infra/values.yaml | envsubst | \
          helm upgrade --install "$REPO_NAME" chartmuseum/generic-app --version 0.1.2 \
            -f - --namespace="$REPO_NAME-$ENVIRONMENT" --set-file sqlInitFile=db/data/init.sql \
            --create-namespace --atomic --timeout=1m --cleanup-on-fail
